import warnings
warnings.filterwarnings("ignore")

#for data manipulation
import pandas as pd
import numpy as np

#for data visualisation
import matplotlib.pyplot as plt
import seaborn as sns

#for data modelling
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
import pickle

#for model evaluation
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

df = pd.read_csv('order.csv')

df.head(5)

df.tail(5)

print('Information about the columns and its datatypes')
df.info()

print('\nShape of the data')
print(df.shape)

print('Information about the columns and its datatypes')
df.info()

print('\nShape of the data')
print(df.shape)

df.describe()

df.info()

# Convert 'request_date' to datetime with dayfirst=True
df['request_date'] = pd.to_datetime(df['request_date'], dayfirst=True)

# Extract year and month
df['year'] = df['request_date'].dt.year
df['month'] = df['request_date'].dt.month

# Display the updated DataFrame info
df.info()

# Select only numeric columns
numeric_df = df.select_dtypes(include=[np.number])

# Calculate the correlation matrix
corrmat = numeric_df.corr()

# Plot the heatmap
plt.figure(figsize=(10, 7))
heatmap = sns.heatmap(corrmat, annot=True, fmt=".2f", cmap="coolwarm", linewidths=0.5, cbar_kws={'shrink': 0.8})

plt.tight_layout()
plt.show()

df = df.drop(['request_date'],axis=1)
X= df.drop(['rate'],axis=1)
Y= df['rate']

X_train , X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2,random_state=42)

lrf = LinearRegression()
lrf.fit(X_train,Y_train)
Y_pred_lrf = lrf.predict(X_test)

dtr = DecisionTreeRegressor()
dtr.fit(X_train,Y_train)
Y_pred_dtr = dtr.predict(X_test)

# Mean Absolute Error (MAE)
mae = mean_absolute_error(Y_test, Y_pred_lrf)

# Mean Squared Error (MSE)
mse = mean_squared_error(Y_test, Y_pred_lrf)

# Root Mean Squared Error (RMSE)
rmse = np.sqrt(mse)

# R-squared (R²)
r_squared = r2_score(Y_test, Y_pred_lrf)

print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"Root Mean Squared Error (RMSE): {rmse}")
print(f"R-squared (R²): {r_squared}")

# Mean Absolute Error (MAE)
mae = mean_absolute_error(Y_test, Y_pred_dtr)

# Mean Squared Error (MSE)
mse = mean_squared_error(Y_test, Y_pred_dtr)

# Root Mean Squared Error (RMSE)
rmse = np.sqrt(mse)

# R-squared (R²)
r_squared = r2_score(Y_test, Y_pred_dtr)

print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"Root Mean Squared Error (RMSE): {rmse}")
print(f"R-squared (R²): {r_squared}")

pickle.dump(dtr, open('dtr.pkl', 'wb'))

# CSV To DataFrame
input_data = pd.read_csv('ordertest.csv')

# Loading trained model
with open('dtr.pkl', 'rb') as file:
    model = pickle.load(file)

# Make predictions
predictions = model.predict(input_data)

# Saving Predictions
output_df = pd.DataFrame(predictions, columns=['Predicted'])
output_df.to_csv('output_file.csv', index=False)

predictions